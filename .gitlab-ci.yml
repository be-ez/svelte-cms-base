image: node:current-alpine

stages:
  - test-and-build
  - process-images
  - deploy
  - rebuild

variables:
  APP_NAME: personal

test:
  stage: test-and-build
  variables:
    # Dummy env vars for svelte-check - not used in actual tests
    DIRECTUS_API_URL: 'https://dummy.example.com'
    DIRECTUS_TOKEN: 'dummy-token'
  script:
    - corepack enable
    - pnpm install
    - pnpm run lint:fix
    - pnpm run check
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_BRANCH == "main"'

process-images:
  stage: process-images
  image: docker:24
  services:
    - docker:24-dind
  variables:
    DOCKER_HOST: unix:///var/run/docker.sock
  before_script:
    # Login to GitLab Container Registry
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
  script:
    # Build x86_64-only image processor and push processed images
    - |
      docker build \
        --platform linux/amd64 \
        --target image-processor \
        --build-arg DIRECTUS_API_URL=$DIRECTUS_API_URL \
        --build-arg DIRECTUS_TOKEN=$DIRECTUS_TOKEN \
        --build-arg PROCESSED_IMAGES_TAG=dummy \
        --tag $CI_REGISTRY_IMAGE:processed-images-$CI_COMMIT_SHA \
        --tag $CI_REGISTRY_IMAGE:processed-images-latest \
        .
    - docker push $CI_REGISTRY_IMAGE:processed-images-$CI_COMMIT_SHA
    - docker push $CI_REGISTRY_IMAGE:processed-images-latest
  only:
    - main

build-docker:
  stage: deploy
  image: docker:24
  services:
    - docker:24-dind
  variables:
    DOCKER_HOST: unix:///var/run/docker.sock
  before_script:
    # Login to GitLab Container Registry
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY

    # Set up Docker Buildx for multi-platform builds
    - docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
    - docker buildx create --name mybuilder --driver docker-container --bootstrap
    - docker buildx use mybuilder
    - docker buildx inspect --bootstrap
  script:
    # Build and push multi-arch image using pre-processed images
    - |
      docker buildx build \
        --platform linux/amd64,linux/arm64 \
        --build-context image-processor=docker-image://$CI_REGISTRY_IMAGE:processed-images-$CI_COMMIT_SHA \
        --cache-from type=registry,ref=$CI_REGISTRY_IMAGE:cache \
        --cache-to type=registry,ref=$CI_REGISTRY_IMAGE:cache,mode=max \
        --tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA \
        --tag $CI_REGISTRY_IMAGE:latest \
        --push \
        .
  only:
    - main
# dokku-deploy:
#   stage: deploy
#   before_script:
#     - apk update
#     - apk add openssh-client git
#     - eval $(ssh-agent -s)
#     - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
#     - mkdir -p ~/.ssh
#     - chmod 700 ~/.ssh
#     - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
#     - chmod 644 ~/.ssh/known_hosts
#   script:
#     - if git remote | grep dokku; then git remote remove dokku; fi
#     - git remote add dokku dokku@$DOKKU_HOST:personal
#     - git config --global core.sshCommand "ssh -o StrictHostKeyChecking=no"
#     - git push dokku HEAD:main
#   only:
#     - main

# dokku-rebuild:
#   stage: rebuild
#   before_script:
#     - apk update
#     - apk add openssh-client
#     - eval $(ssh-agent -s)
#     - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
#     - mkdir -p ~/.ssh
#     - chmod 700 ~/.ssh
#     - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
#     - chmod 644 ~/.ssh/known_hosts
#   script:
#     - ssh -o StrictHostKeyChecking=no dokku@100.91.27.125 dokku ps:rebuild personal
#   rules:
#     - if: $CI_PIPELINE_SOURCE == "trigger"
#       when: always
